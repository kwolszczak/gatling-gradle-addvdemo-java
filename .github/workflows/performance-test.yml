name: Performance test                # name of workflow
on:
  workflow_dispatch:               # to run manually
    inputs:
      env:
        description: "Choose environment to run test: QA / TEST"
        required: true
        default: qa
        type: choice
        options:
          - qa
          - test
      duration:
        description: "Put duration time [s]"
        required: false
        type: number

permissions:
  contents: read
  checks: write
  issues: read
  packages: read
  pull-requests: write

env:
  TEST_ENV: TEST_ENV "Srodowisko testowe:QA"   #zmienna widoczna globalnie, nie mozna jej uzywac w job name, ale w stepach tak

jobs:
  my-first-job:
    name: Run on Ubuntu
    runs-on: ubuntu-latest              #runners
    environment: ${{github.event.inputs.env}}-build
    env:
      TEST_ENV: "ENV TEST"              #zmienna
    outputs:
      firstJob-output: ${{ steps.stepId.outputs.myOutput }}

    steps:
      - name: Checkout code on ${{env.TEST_ENV}}
        uses: actions/checkout@v4

      - name: Print secret password!
        run: |
          echo "secret password is ${{ secrets.MONGODB_PASSWORD}}"
          echo "secret password from QA environment is ${{ secrets.PASSWORD_ENV }}"
          echo "environment variable from QA  is ${{ vars.MYVARIABLE_ENV}} "

      - name: Publish output                            # output - is special variable,we can pass to another job
        id: stepId
        run: echo 'myOutput= testowa zmienna' >> $GITHUB_OUTPUT ';' #tutaj uzyta zmienna globalna

      - name: Run gatling
        run: |
          ./gradlew gatlingRun-acetoys.RecordedSimulation -Dduration=${{github.event.inputs.duration}}

      - name: Publish smoke test artifacts            # artifact - this step produce special data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/reports/gatling
          retention-days: 7

  my-second-job:
    name: Second job
    needs: my-first-job
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
      - name: Output contents on ${{env.TEST_ENV}}
        run: ls
      - name: Get output from prev job
        run: echo "${{ needs.my-first-job.outputs.firstJob-output }}"

    
